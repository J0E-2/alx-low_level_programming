!<arch>
0-isupper.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _isupper - checks for uppercase character
 * @c: character whose case is being checked
 *
 * Return: 1 || 0
 */
int _isupper(int c)
{
if (c >= 65 && c <= 90)
return (1);
else
return (0);
}
0-memset.c/     0           0     0     644     319       `
#include "main.h"

/**
 * _memset - fills memory with a constant variable
 * @s: memory to be filled
 * @b: constant byte
 * @n: bytes of memory to be filled
 *
 * Return: pointer to memory area
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;
	return (s);
}

0-strcat.c/     0           0     0     644     362       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @dest: first string
 * @src: second string
 *
 * Return: the result of the concatenated strings
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{
		;
	}
	for (j = 0; src[j] != '\0'; j++, i++)
	{
		dest[i] = src[j];
	}
	return (dest);
}
101_atoi.c/     0           0     0     644     117       `
#include "main.h"
/**
 * atoi - empty function
 * @s: string
 * 
 * Return: 0
 */

int _atoi(char *s)
{
	return 0;
}

102_strspn.c/   0           0     0     644     163       `
#include "main.h"
/**
 * _strchr - empty function
 * @s: string
 * @accept: string
 *
 * Return: 0
 */

unsigned int _strspn(char *s, char *accept)
{
	return 0;
}

1-isdigit.c/    0           0     0     644     188       `
#include "main.h"
/**
 * _isdigit - checks for a digit
 * @c: character to be checked
 *
 * Return: 1 || 0
 */
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
return (1);
else
return (0);
}
1-memcpy.c/     0           0     0     644     341       `
#include "main.h"

/**
 * *_memcpy - function that copies memory area
 * @dest: memory to be copied to
 * @src: memory to be copied
 * @n: number of bytes to be copied
 *
 * Return: a pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];
	return (dest);
}

1-strncat.c/    0           0     0     644     400       `
#include "main.h"

/**
 * _strncat - function concatenates two strings.
 * @dest: string 1
 * @src: string 2
 * @n: number of bytes to be used from src
 *  Return: resulting string dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int j;
	int i;

	for (i = 0; dest[i] != '\0'; i++)
		;
	for (j = 0; j < n && src[j] != '\0'; j++)
		dest[i + j] = src[j];
	dest[i + n] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     449       `
#include "main.h"
#define NULL 0

/**
 * _strchr - function locates character in a string
 * @s: memory to be checked
 * @c: character being located
 *
 * Return: pointer to the first occurrence of the
 * character c in s or null if the character is not found
 */

char *_strchr(char *s, char c)
{
	int i;
	char *a;

	i = 0;

	for (i = 0; s[i] != '\0' && s[i] != c; i++)
		;
	if (s[i] == c)
	{
		a = &s[i];
		return (a);
	}
	else
		return (NULL);
}

2-strlen.c/     0           0     0     644     223       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: the pointer to the string
 *
 * Return: the length of string
 */

int _strlen(char *s)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
		;
	return (i);
}

2-strncpy.c/    0           0     0     644     394       `
#include "main.h"

/**
 * _strncpy - function copies a string
 * @dest: pointer to string 1
 * @src: pointer to string 2
 * @n: number of bytes to be copied from src
 *
 * Return: resulting pointer to string dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int j;

	for (j = 0; j < n && src[j] != '\0'; j++)
		dest[j] = src[j];
	for ( ; j < n; j++)
		dest[j] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     232       `
#include "main.h"
/**
 * _islower - function checks for lowercase characters
 * @c: the character to be checked
 * Return: on success 1 // 0
 */
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     247       `
#include "main.h"

/**
 * _puts - prints a string followed by new line
 * @str: the variable pointer to the string being printed
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
		_putchar('\n');
}

3-strcmp.c/     0           0     0     644     241       `
#include "main.h"

/**
 * _strcmp - function compares two integers
 * @s1: string 1
 * @s2: string 2
 *
 * Return: integer less than, greater than or equal to 0.
 */

int _strcmp(char *s1, char *s2)
{
	int a;

	a = *s1 - *s2;
	return (a);
}

4-isalpha.c/    0           0     0     644     246       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: character to be checked
 *
 * Return: 0 || 1
 */
int _isalpha(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else if (c >= 'A' && c <= 'Z')
return (1);
else
return (0);
}
4-strpbrk.c/    0           0     0     644     503       `
#include "main.h"
#define NULL 0
/**
 * _strpbrk - function searches a string for any of a set of bytes
 * @s: string being searched
 * @accept: string whose bytes occurrence in are being searched
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept
 */

char *_strpbrk(char *s, char *accept)
{
	int i = 0, j;

	while (s[i] != '\0')
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				s = &s[i];
				return (s);
			}
		}
		i++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     622       `
#include "main.h"
#define NULL 0

/**
 * _strstr - function locates a substring
 * @haystack: string being checked
 * @needle: substring to be located
 *
 * Return: a pointer to the beginning of located substring or NULL if not found
 */

char *_strstr(char *haystack, char *needle)
{
	int i = 0, j, x;

	if (needle[0] == '\0')
		return (haystack);

	while (haystack[i] != '\0')
	{
		if (haystack[i] == needle[0])
		{
			x = i;
		j = 0;
		while (needle[j] != '\0')
		{
			if (haystack[x] == needle[j])
				x++, j++;

			else
				break;
		}
		if (needle[j] == '\0')
			return (haystack + i);
		}
	i++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     258       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @j: integer whose absolute value is to be computed
 * Return: absolute value of integer
 */
int _abs(int j)
{
if (j > 0)
return (j);
else if (j < 0)
return (-j);
else
return (0);
}
9-strcpy.c/     0           0     0     644     387       `
#include "main.h"

/**
 * _strcpy - function copies the string copied to by
 * src including '\0' to the buffer pointed to by dest
 * @dest: pointer to buffer to be pasted to
 * @src: pointer to string being copied
 *
 * Return: pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
		dest[i] = src[i];
	dest[i] = '\0';
	return (dest);
}

main.c/         0           0     0     644     152       `
#include "main.h"



int main(void)
	
{
	
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	
	return (0);
	
}
_putchar.c/     0           0     0     644     246       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * 
 * Return: on duccess 1.
 * on error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
